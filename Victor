const { Client, GatewayIntentBits } = require('discord.js');
const db = require('./database');
const config = require('./config.json');
const ipChecker = require('./utils/ipChecker');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
    ],
});

let mainAccountID = null;

// Evento: Novo membro adicionado
client.on('guildMemberAdd', async (member) => {
    try {
        const accountAge = Date.now() - member.user.createdAt.getTime();
        const ageDays = Math.floor(accountAge / (1000 * 60 * 60 * 24));

        // Gerar IP simulado com interpola√ß√£o corrigida
        const simulatedIP = 123.45.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)};
        const ipInfo = await ipChecker.getIPInfo(simulatedIP);

        const logChannel = member.guild.channels.cache.find(c => c.name === config.logChannel);
        if (!logChannel) return;

        if (ipInfo && ipInfo.org) {
            await db.saveAltSuspect(member.id, member.user.username, ipInfo.org);
            logChannel.send(‚ö†Ô∏è **Alvo identificado**: ${member.user.tag} (ID: ${member.id})\nüîç ASN associado: ${ipInfo.org});
        } else if (ageDays < 7) {
            await db.saveAltSuspect(member.id, member.user.username, "Fonte desconhecida.");
            logChannel.send(‚ö†Ô∏è **Alvo identificado**: ${member.user.tag} (ID: ${member.id})\n‚ö†Ô∏è Tempo de cria√ß√£o: Menos de 7 dias.);
        }
    } catch (error) {
        console.error("‚ùå Erro ao processar novo membro:", error);
    }
});

// Evento: Comandos via mensagens
client.on('messageCreate', async (message) => {
    if (message.author.bot || !message.content.startsWith(config.prefix)) return;

    const args = message.content.slice(config.prefix.length).trim().split(/\s+/);
    const command = args.shift().toLowerCase();

    try {
        if (command === "setmain") {
            const userId = args[0];
            if (!userId) return message.reply("‚ùå Uso: !setMain <userID>. Informe o ID da conta principal.");

            const user = await client.users.fetch(userId);
            if (!user) return message.reply("‚ùå Usu√°rio n√£o encontrado!");

            mainAccountID = user.id;
            message.reply(‚úÖ Conta principal definida como: ${user.tag}.);
        } else if (command === "checkalt") {
            const userId = args[0];
            if (!userId) return message.reply("‚ùå Uso: !checkAlt <userID>. Informe o ID do alvo.");

            const altData = await db.getAltData(userId);
            if (altData) {
                message.reply(‚úÖ Alvo identificado: ${userId} √© suspeito.\nüì° ASN detectado: ${altData.asn});
            } else {
                message.reply("‚ùå Nenhuma evid√™ncia encontrada.");
            }
        }
    } catch (error) {
        console.error("‚ùå Erro ao executar comando:", error);
    }
});

// Evento: Bot inicializado
client.on('ready', async () => {
    console.log(‚úÖ Bot ${client.user.tag} online.);

    try {
        const guild = client.guilds.cache.get(config.guildId);
        if (!guild) {
            console.error("‚ùå Servidor n√£o encontrado. Verifique o ID no arquivo config.json.");
            return;
        }

        const members = await guild.members.fetch();
        members.forEach(member => {
            if (!member.user.bot) checkMember(member);
        });
    } catch (error) {
        console.error("‚ùå Erro ao carregar membros do servidor:", error);
    }
});

// Fun√ß√£o: Verificar membros (an√°lise de alt)
async function checkMember(member) {
    try {
        if (!mainAccountID) {
            console.warn("‚ö†Ô∏è Conta principal n√£o definida.");
            return;
        }

        const accountAge = Date.now() - member.user.createdAt.getTime();
        const ageDays = Math.floor(accountAge / (1000 * 60 * 60 * 24));

        const mainAccount = await client.users.fetch(mainAccountID);
        const mainAccountAge = Date.now() - mainAccount.createdAt.getTime();
        const mainAccountAgeDays = Math.floor(mainAccountAge / (1000 * 60 * 60 * 24));

        const logChannel = member.guild.channels.cache.find(c => c.name === config.logChannel);
        if (!logChannel) return;

        if (ageDays < 7 || Math.abs(ageDays - mainAccountAgeDays) < 7) {
            const simulatedIP = `123.45.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`;
            const ipInfo = await ipChecker.getIPInfo(simulatedIP);

            logChannel.send(‚ö†Ô∏è **Alvo suspeito**: ${member.user.tag} (ID: ${member.id})\nPoss√≠vel v√≠nculo com a conta principal.);

            if (ipInfo && ipInfo.org) {
                await db.saveAltSuspect(member.id, member.user.username, ipInfo.org);
            }
        } else if (member.user.id === mainAccountID) {
            logChannel.send(‚úÖ **Conta Principal identificada**: ${member.user.tag} (ID: ${member.id}));
        }
    } catch (error) {
        console.error("‚ùå Erro ao verificar membro:", error);
    }
}

// Login do bot
client.login(config.token);
